// cardFlow.js ‚Äî –±–ª–æ–∫ "–ö–∞—Ä—Ç—ã" –¥–ª—è CRM2 –±–æ—Ç–∞

import { google } from "googleapis";
import nodeSchedule from "node-schedule";
import { Markup } from "telegraf";

/* ===== ENV ===== */
const SHEET_ID = process.env.CARDS_SPREADSHEET_ID || process.env.SPREADSHEET_ID; // ID —Ç–∞–±–ª–∏—Ü—ã Card_Flow_Manager
const SA_B64   = process.env.GOOGLE_SERVICE_ACCOUNT_B64;
if (!SHEET_ID) throw new Error("cardFlow: missing CARDS_SPREADSHEET_ID / SPREADSHEET_ID");
if (!SA_B64)   throw new Error("cardFlow: missing GOOGLE_SERVICE_ACCOUNT_B64");

const SHEET_NAMES = JSON.parse(
  process.env.SHEET_NAMES_JSON ||
  '{"dashboard":"–î–∞—à–±–æ—Ä–¥","main":"–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã","buffer":"–ë—É—Ñ–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã","ar":"–ê–≤—Ç–æ—Ä–µ–≥–∏","reissue":"–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫–∏","settings":"Settings"}'
);

/* ===== Google Sheets client ===== */
const svc = JSON.parse(Buffer.from(SA_B64, "base64").toString("utf8"));
const auth = new google.auth.JWT(
  svc.client_email,
  null,
  svc.private_key,
  ["https://www.googleapis.com/auth/spreadsheets"]
);
const sheets = google.sheets({ version: "v4", auth });

/* ===== Tiny cache ===== */
const mem = new Map();
const setMem = (k, v, ms = 60_000) => mem.set(k, { v, exp: Date.now() + ms });
const getMem = (k) => {
  const it = mem.get(k);
  if (!it || Date.now() > it.exp) { mem.delete(k); return null; }
  return it.v;
};

/* ===== Settings / Admins / Subs ===== */
const SETTINGS_SHEET = SHEET_NAMES.settings || "Settings";

/** Settings: A chat_id, B username, E is_admin, F subscribed */
async function readSettings() {
  const c = getMem("settings");
  if (c) return c;

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: `${SETTINGS_SHEET}!A2:H`,
  });

  const list = (res.data.values || []).map((r) => ({
    chat_id: String(r[0] || "").trim(),            // A
    username: String(r[1] || "").trim(),           // B
    admin: /^true$/i.test(String(r[4] || "")),     // E
    subscribed: r[5] == null ? true : /^true$/i.test(String(r[5])), // F (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Å—á–∏—Ç–∞–µ–º true)
  }));

  setMem("settings", list, 60_000);
  return list;
}
async function isAdmin(chatId) {
  const me = String(chatId);
  const rows = await readSettings();
  return rows.some((r) => r.chat_id === me && r.admin);
}
async function listSubs() {
  const rows = await readSettings();
  return rows.filter((r) => r.subscribed && r.chat_id);
}
async function upsertSub(chatId, username = "") {
  const all = await readSettings();
  const me = String(chatId);
  const idx = all.findIndex((r) => r.chat_id === me);

  if (idx >= 0) {
    await sheets.spreadsheets.values.update({
      spreadsheetId: SHEET_ID,
      range: `${SETTINGS_SHEET}!F${idx + 2}`,
      valueInputOption: "RAW",
      requestBody: { values: [["TRUE"]] },
    });
    mem.delete("settings");
    return;
  }
  await sheets.spreadsheets.values.append({
    spreadsheetId: SHEET_ID,
    range: `${SETTINGS_SHEET}!A:F`,
    valueInputOption: "RAW",
    insertDataOption: "INSERT_ROWS",
    requestBody: { values: [[me, username || "", "", "", "", "TRUE"]] },
  });
  mem.delete("settings");
}
async function removeSub(chatId) {
  const all = await readSettings();
  const me = String(chatId);
  const idx = all.findIndex((r) => r.chat_id === me);
  if (idx < 0) return;

  await sheets.spreadsheets.values.update({
    spreadsheetId: SHEET_ID,
    range: `${SETTINGS_SHEET}!F${idx + 2}`,
    valueInputOption: "RAW",
    requestBody: { values: [["FALSE"]] },
  });
  mem.delete("settings");
}

/* ===== –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ / —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ ===== */
const MAIN_SHEET   = SHEET_NAMES.main   || "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã";
const BUFFER_SHEET = SHEET_NAMES.buffer || "–ë—É—Ñ–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã";

async function quickStats() {
  const c = getMem("quick");
  if (c) return c;

  // –û—Å–Ω–æ–≤–Ω—ã–µ: D "–°–ª–æ—Ç—ã –≤—Å–µ–≥–æ", E "–°–ª–æ—Ç—ã –∑–∞–Ω—è—Ç–æ", G "–•–æ–ª–¥—ã $", I "–°—Ç–∞—Ç—É—Å"
  const mainRes = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: `${MAIN_SHEET}!A2:K`,
  });
  const main = mainRes.data.values || [];

  let totalSlots = 0, usedSlots = 0, holds = 0, reissue = 0;
  for (const r of main) {
    const dTotal = Number(r[3] || 0);                         // D
    const dUsed  = Number(r[4] || 0);                         // E
    const h      = Number(String(r[6] || "0").replace(",", ".")); // G
    const status = String(r[8] || "").trim();                 // I

    if (!isNaN(dTotal)) totalSlots += dTotal;
    if (!isNaN(dUsed))  usedSlots  += dUsed;
    if (!isNaN(h))      holds      += h;
    if (/^–∫\s*–ø–µ—Ä–µ–≤—ã–ø—É—Å–∫—É$/i.test(status)) reissue += 1;
  }
  const freeSlots = Math.max(0, totalSlots - usedSlots);

  // –ë—É—Ñ–µ—Ä–Ω—ã–µ: E "–°—Ç–∞—Ç—É—Å" => "–°–≤–æ–±–æ–¥–Ω–∞"
  const bufRes = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: `${BUFFER_SHEET}!A2:G`,
  });
  const buf = bufRes.data.values || [];
  let freeBuffer = 0;
  for (const r of buf) {
    const st = String(r[4] || "").trim(); // E
    if (/^—Å–≤–æ–±–æ–¥–Ω–∞$/i.test(st)) freeBuffer += 1;
  }

  const out = { freeSlots, freeBuffer, holds, reissue };
  setMem("quick", out, 60_000);
  return out;
}

async function computeStatusText() {
  const { freeSlots, freeBuffer, holds, reissue } = await quickStats();

  const warn = [];
  if (freeSlots < 3)  warn.push(`–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${freeSlots} (< 3)`);
  if (freeBuffer < 5) warn.push(`–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –±—É—Ñ–µ—Ä–æ–∫: ${freeBuffer} (< 5)`);

  const warnLine = warn.length ? `\n‚ö†Ô∏è ${warn.join(" | ")}` : "";
  const tips = (freeSlots === 0 && freeBuffer === 0 && holds === 0)
    ? "\n‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è ‚Äî —Å—á–∏—Ç–∞—é –Ω—É–ª–∏. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ª–∏—Å—Ç—ã."
    : "";

  return [
    "üìä *–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç*",
    `–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: *${freeSlots}*`,
    `–°–≤–æ–±–æ–¥–Ω—ã–µ –±—É—Ñ–µ—Ä–∫–∏: *${freeBuffer}*`,
    `–ó–∞–≤–∏—Å—à–∏–µ —Ö–æ–ª–¥—ã: *$${holds.toFixed(2)}*`,
    `–ö–∞—Ä—Ç –∫ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫—É: *${reissue}*`,
    warnLine,
    tips
  ].join("\n");
}

/* ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===== */
function buildMenu(isAdmin = false) {
  // –û–±—â–∏–µ —Ä—è–¥—ã
  const rows = [
    [Markup.button.callback("üìä –°—Ç–∞—Ç—É—Å", "cards:status")],
    [Markup.button.callback("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "cards:sub"), Markup.button.callback("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", "cards:unsub")],
  ];

  // –î–æ–ø. —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º
  if (isAdmin) {
    rows.push([Markup.button.callback("‚ö° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", "cards:checknow")]);
  }

  // –û–±—â–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ + –∑–∞–∫—Ä—ã—Ç—å
  rows.push(
    [Markup.button.callback("üß© –°–ª–æ—Ç—ã", "cards:slots"), Markup.button.callback("üß© –ë—É—Ñ–µ—Ä–∫–∏", "cards:buffers"), Markup.button.callback("üß© –ü–µ—Ä–µ–≤—ã–ø—É—Å–∫", "cards:reissue")],
    [Markup.button.callback("‚¨ÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å", "cards:close")],
  );

  return Markup.inlineKeyboard(rows);
}

/* ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===== */
export function registerCardFlow(bot) {
  // –ö–Ω–æ–ø–∫–∞ ¬´–ö–∞—Ä—Ç—ã¬ª
  bot.hears("üí≥ –ö–∞—Ä—Ç—ã", async (ctx) => {
    const admin = await isAdmin(ctx.chat.id);
    await ctx.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–∞—Ä—Ç–∞–º:", buildMenu(admin));
  });

  // –°—Ç–∞—Ç—É—Å
  bot.action("cards:status", async (ctx) => {
    await ctx.answerCbQuery();
    const admin = await isAdmin(ctx.chat.id);
    const text = await computeStatusText();
    try {
      await ctx.editMessageText(text, { parse_mode: "Markdown", ...buildMenu(admin) });
    } catch {
      await ctx.reply(text, { parse_mode: "Markdown", ...buildMenu(admin) });
    }
  });

  // –ü–æ–¥–ø–∏—Å–∫–∞ / –û—Ç–ø–∏—Å–∫–∞
  bot.action("cards:sub", async (ctx) => {
    await ctx.answerCbQuery();
    await upsertSub(ctx.chat.id, ctx.from?.username || "");
    const admin = await isAdmin(ctx.chat.id);
    await ctx.reply("–ü–æ–¥–ø–∏—Å–∞–ª –Ω–∞ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úÖ", buildMenu(admin));
  });

  bot.action("cards:unsub", async (ctx) => {
    await ctx.answerCbQuery();
    await removeSub(ctx.chat.id);
    const admin = await isAdmin(ctx.chat.id);
    await ctx.reply("–û—Ç–ø–∏—Å–∞–ª –æ—Ç –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚úÖ", buildMenu(admin));
  });

  // –†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (—Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–æ–≤ ‚Äî –∏ —Ç—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º)
  bot.action("cards:checknow", async (ctx) => {
    await ctx.answerCbQuery();
    if (!(await isAdmin(ctx.chat.id))) {
      return ctx.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.", buildMenu(false));
    }
    const text = await computeStatusText();
    const subs = await listSubs();
    for (const s of subs) {
      try {
        await ctx.telegram.sendMessage(Number(s.chat_id), text, { parse_mode: "Markdown" });
      } catch (e) {
        console.error("send fail", s.chat_id, e?.message || e);
      }
    }
    await ctx.reply("–†–∞–∑–æ—Å–ª–∞–ª ‚úÖ", buildMenu(true));
  });

  // –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  bot.action("cards:slots", async (ctx) => {
    await ctx.answerCbQuery();
    const admin = await isAdmin(ctx.chat.id);
    const { freeSlots } = await quickStats();
    await ctx.reply(`–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: *${freeSlots}*`, { parse_mode: "Markdown", ...buildMenu(admin) });
  });
  bot.action("cards:buffers", async (ctx) => {
    await ctx.answerCbQuery();
    const admin = await isAdmin(ctx.chat.id);
    const { freeBuffer } = await quickStats();
    await ctx.reply(`–°–≤–æ–±–æ–¥–Ω—ã–µ –±—É—Ñ–µ—Ä–∫–∏: *${freeBuffer}*`, { parse_mode: "Markdown", ...buildMenu(admin) });
  });
  bot.action("cards:reissue", async (ctx) => {
    await ctx.answerCbQuery();
    const admin = await isAdmin(ctx.chat.id);
    const { reissue } = await quickStats();
    await ctx.reply(`–ö–∞—Ä—Ç –∫ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫—É: *${reissue}*`, { parse_mode: "Markdown", ...buildMenu(admin) });
  });

  bot.action("cards:close", async (ctx) => {
    await ctx.answerCbQuery();
    try { await ctx.editMessageText("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ."); } catch {}
  });

  /* ===== –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è =====
     –ö–∏–µ–≤ 11:00, 15:00, 19:00, 23:00  => UTC 08:00, 12:00, 16:00, 20:00 */
  const CRON_RULE_UTC = "0 8,12,16,20 * * *";
  nodeSchedule.scheduleJob(CRON_RULE_UTC, async () => {
    try {
      const text = await computeStatusText();
      const subs = await listSubs();
      for (const s of subs) {
        try {
          await bot.telegram.sendMessage(Number(s.chat_id), text, { parse_mode: "Markdown" });
        } catch (e) {
          console.error("auto notify fail", s.chat_id, e?.message || e);
        }
      }
    } catch (e) {
      console.error("auto notify error", e?.message || e);
    }
  });
}
