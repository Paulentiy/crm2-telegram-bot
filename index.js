import express from 'express';
import { Telegraf, Markup, session } from 'telegraf';
import { google } from 'googleapis';

/** ====== ENV ====== **/
const {
  TELEGRAM_TOKEN,
  SPREADSHEET_ID,
  GOOGLE_SERVICE_ACCOUNT_B64,
  WEBHOOK_BASE_URL // –ø—É—Å—Ç–æ => long polling
} = process.env;

if (!TELEGRAM_TOKEN) throw new Error('Missing TELEGRAM_TOKEN');
if (!SPREADSHEET_ID) throw new Error('Missing SPREADSHEET_ID');
if (!GOOGLE_SERVICE_ACCOUNT_B64) throw new Error('Missing GOOGLE_SERVICE_ACCOUNT_B64');

/** ====== GOOGLE SHEETS AUTH ====== **/
const svc = JSON.parse(Buffer.from(GOOGLE_SERVICE_ACCOUNT_B64, 'base64').toString('utf8'));
const auth = new google.auth.JWT(
  svc.client_email,
  null,
  svc.private_key,
  ['https://www.googleapis.com/auth/spreadsheets']
);
const sheets = google.sheets({ version: 'v4', auth });

/** ====== SHEET NAMES ====== **/
const SHEET_EXPENSES = '–†–∞—Å—Ö–æ–¥—ã';
const SHEET_TYPES    = '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏';
const SHEET_RATES    = '–ö—É—Ä—Å—ã';
const SHEET_META     = 'BotMeta';

/** ====== CACHE ====== **/
const cache = new Map();
const setCache = (k, v, ms = 10 * 60 * 1000) => cache.set(k, { v, exp: Date.now() + ms });
const getCache = (k) => { const it = cache.get(k); if (!it || Date.now() > it.exp) { cache.delete(k); return null; } return it.v; };

/** ====== TEXTS & KEYBOARDS ====== **/
const HELP_TEXT =
`–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ CRM2.

–ö–Ω–æ–ø–∫–∏:
‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Å—É–º–º—ã –≤ USD (—Å–µ–≥–æ–¥–Ω—è/7–¥–Ω/–º–µ—Å—è—Ü)
‚Ä¢ ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é ‚Äî –æ—Ç–º–µ–Ω–∞ –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
‚Ä¢ üìã –¢–∏–ø—ã / üí± –í–∞–ª—é—Ç—ã ‚Äî —Å–ø–∏—Å–∫–∏ –∏–∑ ¬´–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏¬ª –∏ ¬´–ö—É—Ä—Å—ã¬ª

–§–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ –≤—Ä—É—á–Ω—É—é):
/exp –î–∞—Ç–∞; –ü–ª–∞—Ç—ë–∂–∫–∞; –¢–∏–ø; GEO; –°—É–º–º–∞; –í–∞–ª—é—Ç–∞; –ö–æ–º–º–µ–Ω—Ç
–ü—Ä–∏–º–µ—Ä: /exp ; AdvCash; –ü—Ä–æ–∫—Å–∏; UA; 120; USD; —Ç–µ—Å—Ç`;

const mainKeyboard = () =>
  Markup.keyboard([
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üìã –¢–∏–ø—ã', 'üí± –í–∞–ª—é—Ç—ã'],
    ['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
  ]).resize().persistent();

const cancelKeyboard = () => Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞']]).resize();

/** ====== REGEX-–¢–†–ò–ì–ì–ï–†–´ ====== **/
const RX_ADD     = [/^(\+|‚ûï)?\s*–¥–æ–±–∞–≤–∏—Ç—å\s+—Ä–∞—Å—Ö–æ–¥$/i];
const RX_TYPES   = [/^(üìã)?\s*—Ç–∏–ø—ã$/i];
const RX_CURR    = [/^(üí±)?\s*–≤–∞–ª—é—Ç—ã$/i, /^currencies$/i];
const RX_STATS   = [/^(üìä)?\s*—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$/i];
const RX_UNDO    = [/^(‚Ü©Ô∏è)?\s*–æ—Ç–º–µ–Ω–∏—Ç—å\s+–ø–æ—Å–ª–µ–¥–Ω—é—é$/i];
const RX_HELP    = [/^(‚ÑπÔ∏è)?\s*–ø–æ–º–æ—â—å$/i, /^help$/i];
const RX_CANCEL  = [/^(‚ùå)?\s*–æ—Ç–º–µ–Ω–∞\s+–≤–≤–æ–¥–∞$/i];

/** ====== HELPERS ====== **/
function ddmmyyyy(d){ const dd=String(d.getDate()).padStart(2,'0'); const mm=String(d.getMonth()+1).padStart(2,'0'); const yy=d.getFullYear(); return `${dd}.${mm}.${yy}`; }
function parseDDMMYYYY(s){
  const m=String(s||'').trim().match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
  if(!m) throw new Error('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –ø—É—Å—Ç–æ');
  const d=new Date(+m[3],+m[2]-1,+m[1]); if(isNaN(d.getTime())) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞'); return d;
}
async function ensureMetaSheet(){
  const info = await sheets.spreadsheets.get({ spreadsheetId: SPREADSHEET_ID });
  const has = (info.data.sheets||[]).some(s=>s.properties?.title===SHEET_META);
  if(!has){
    await sheets.spreadsheets.batchUpdate({ spreadsheetId: SPREADSHEET_ID, requestBody:{ requests:[{ addSheet:{ properties:{ title:SHEET_META } } }] }});
    await sheets.spreadsheets.values.update({
      spreadsheetId: SPREADSHEET_ID, range:`${SHEET_META}!A1:C1`, valueInputOption:'RAW',
      requestBody:{ values:[['user_id','row','ts']] }
    });
  }
}

/** ====== LOOKUPS ====== **/
async function getTypes(force=false){
  if(!force){ const c=getCache('types'); if(c) return c; }
  const res=await sheets.spreadsheets.values.get({ spreadsheetId:SPREADSHEET_ID, range:`${SHEET_TYPES}!A2:A` });
  const arr=(res.data.values||[]).flat().map(v=>String(v).trim()).filter(Boolean);
  setCache('types',arr); return arr;
}
async function getCurrencies(force=false){
  if(!force){ const c=getCache('curr'); if(c) return c; }
  const res=await sheets.spreadsheets.values.get({ spreadsheetId:SPREADSHEET_ID, range:`${SHEET_RATES}!A2:A` });
  let arr=(res.data.values||[]).flat().map(v=>String(v).trim().toUpperCase()).filter(Boolean);
  if(arr.length===0){
    const hdr=await sheets.spreadsheets.values.get({ spreadsheetId:SPREADSHEET_ID, range:`${SHEET_RATES}!1:1` });
    const header=(hdr.data.values?.[0]||[]).map(s=>String(s).trim().toLowerCase());
    const idx=header.findIndex(h=>['–≤–∞–ª—é—Ç–∞','currency','curr','code','–∫–æ–¥'].includes(h));
    if(idx>=0){
      const col=String.fromCharCode('A'.charCodeAt(0)+idx);
      const res2=await sheets.spreadsheets.values.get({ spreadsheetId:SPREADSHEET_ID, range:`${SHEET_RATES}!${col}2:${col}` });
      arr=(res2.data.values||[]).flat().map(v=>String(v).trim().toUpperCase()).filter(Boolean);
    }
  }
  if(arr.length===0) throw new Error('–í ¬´–ö—É—Ä—Å—ã¬ª –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç. –ó–∞–ø–æ–ª–Ω–∏ A2:A (USD, EUR, ‚Ä¶).');
  setCache('curr',arr); return arr;
}
async function getRatesMap(){
  const c=getCache('rates'); if(c) return c;
  const res=await sheets.spreadsheets.values.get({ spreadsheetId:SPREADSHEET_ID, range:`${SHEET_RATES}!A2:B` });
  const map={};
  for(const row of (res.data.values||[])){
    const code=String(row[0]||'').trim().toUpperCase();
    const rate=Number(String(row[1]||'').replace(',','.'));
    if(code) map[code]=rate>0?rate:(code==='USD'?1:NaN);
  }
  if(!map.USD) map.USD=1;
  setCache('rates',map); return map;
}
async function getRatesOrEmpty(){ try{ return await getRatesMap(); }catch{ return {}; } }

/** ====== AUTOFIX & VALIDATION ====== **/
async function normalizeType(raw){
  const types=await getTypes(); const t=String(raw||'').trim();
  const found=types.find(x=>x.toLowerCase()===t.toLowerCase());
  return found || (t ? (t[0].toUpperCase()+t.slice(1).toLowerCase()) : t);
}
const normalizeCurr = raw => String(raw||'').trim().toUpperCase();
const normalizeDate = raw => { const s=String(raw||'').trim(); return s?parseDDMMYYYY(s):new Date(); };

async function validateRow([date,pay,type,geo,amt,curr]){
  const types=await getTypes(); const currencies=await getCurrencies(); const errs=[];
  if(!(date instanceof Date) || isNaN(date.getTime())) errs.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞');
  if(!pay) errs.push('–ü–ª–∞—Ç—ë–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
  if(!types.some(t=>t.toLowerCase()===String(type||'').trim().toLowerCase())) errs.push(`–¢–∏–ø –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞: ¬´${type}¬ª`);
  const cc=String(curr||'').trim().toUpperCase(); if(!currencies.includes(cc)) errs.push(`–í–∞–ª—é—Ç–∞ –Ω–µ –∏–∑ ¬´–ö—É—Ä—Å—ã¬ª: ¬´${cc}¬ª`);
  if(!(Number(amt)>0)) errs.push('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0');
  if(errs.length) throw new Error(errs.join('\n'));
}

/** ====== APPEND / UNDO ====== **/
async function appendExpenseRow(userId,[date,pay,type,geo,amt,curr,comment]){
  const values=[[ddmmyyyy(date),pay,type,geo,amt,curr,'',comment]];
  const resp=await sheets.spreadsheets.values.append({
    spreadsheetId:SPREADSHEET_ID, range:`${SHEET_EXPENSES}!A:H`,
    valueInputOption:'USER_ENTERED', insertDataOption:'INSERT_ROWS', requestBody:{ values }
  });
  const upd=resp.data.updates?.updatedRange||''; const m=upd.match(/!(?:[A-Z]+)(\d+):/); const rowNumber=m?Number(m[1]):null;
  await ensureMetaSheet();
  if(rowNumber){
    await sheets.spreadsheets.values.append({
      spreadsheetId:SPREADSHEET_ID, range:`${SHEET_META}!A:C`, valueInputOption:'RAW',
      requestBody:{ values:[[String(userId),rowNumber,new Date().toISOString()]] }
    });
  }
  return rowNumber;
}
async function getSheetIdByTitle(title){
  const info=await sheets.spreadsheets.get({ spreadsheetId:SPREADSHEET_ID });
  const sh=(info.data.sheets||[]).find(s=>s.properties?.title===title);
  if(!sh) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞: '+title);
  return sh.properties.sheetId;
}
async function undoLastForUser(userId){
  await ensureMetaSheet();
  const res=await sheets.spreadsheets.values.get({ spreadsheetId:SPREADSHEET_ID, range:`${SHEET_META}!A:C` });
  const rows=(res.data.values||[]).slice(1).filter(r=>r[0]===String(userId));
  if(!rows.length) return { ok:false, reason:'–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.' };
  const rowNumber=Number(rows[rows.length-1][1]||0); if(!(rowNumber>1)) return { ok:false, reason:'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏.' };
  await sheets.spreadsheets.batchUpdate({
    spreadsheetId:SPREADSHEET_ID,
    requestBody:{ requests:[{ deleteDimension:{ range:{ sheetId:await getSheetIdByTitle(SHEET_EXPENSES), dimension:'ROWS', startIndex:rowNumber-1, endIndex:rowNumber } } }] }
  });
  return { ok:true, row:rowNumber };
}

/** ====== STATS ====== **/
async function loadExpensesAtoG(){
  const res=await sheets.spreadsheets.values.get({ spreadsheetId:SPREADSHEET_ID, range:`${SHEET_EXPENSES}!A2:G` });
  return res.data.values||[];
}
function parseDateCell(s){ try{ return parseDDMMYYYY(s); }catch{ return null; } }
async function sumUSD(start,end){
  const rows=await loadExpensesAtoG(); const rates=await getRatesOrEmpty(); let sum=0;
  for(const r of rows){
    const d=parseDateCell(r[0]); if(!d) continue;
    if(d<start || d>=end) continue;
    const amt=Number(String(r[4]||'').replace(',','.'))||0;
    const curr=String(r[5]||'').trim().toUpperCase();
    const usd=Number(String(r[6]||'').replace(',','.'))||NaN;
    if(!isNaN(usd)) sum+=usd; else if(amt>0 && curr && rates[curr]>0) sum+=amt*rates[curr];
  } return sum;
}
const startOfToday=()=>{ const d=new Date(); d.setHours(0,0,0,0); return d; };
const addDays=(d,n)=>{ const x=new Date(d); x.setDate(x.getDate()+n); return x; };
const startOfMonth=()=>{ const d=new Date(); return new Date(d.getFullYear(), d.getMonth(), 1); };

/** ====== BOT ====== **/
const bot = new Telegraf(TELEGRAM_TOKEN, { handlerTimeout: 30000 });

/* 1) –ü–æ–ª—è —Å–µ—Å—Å–∏–∏ ‚Äî –ø–æ–ª–∏—Ñ–∏–ª–ª (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º ctx.session) */
bot.use((ctx, next) => { if (!ctx.session) ctx.session = {}; return next(); });

/* 2) –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω telegraf/session ‚Äî –ø–æ–¥–∫–ª—é—á–∏–º —Ç–æ–∂–µ */
try { bot.use(session()); } catch { /* ok */ }

/* –õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */
bot.on('text', (ctx, next) => { console.log('TEXT:', ctx.message.text); return next(); });

/* –ê–Ω—Ç–∏-–¥—É–±–ª–∏ –ø–æ update_id */
const seen=new Map(); const seenTTL=10*60*1000;
setInterval(()=>{ const now=Date.now(); for(const [k,t] of seen){ if(now-t>seenTTL) seen.delete(k); }},60000);
bot.use((ctx,next)=>{ const id=ctx.update?.update_id; if(id!=null){ if(seen.has(id)) return; seen.set(id,Date.now()); } return next(); });

/* –ú–µ–Ω—é/–∫–æ–º–∞–Ω–¥—ã */
const showMenu=(ctx,text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')=>ctx.reply(text,mainKeyboard());
bot.start(ctx=>ctx.reply(HELP_TEXT,mainKeyboard()));
bot.help (ctx=>ctx.reply(HELP_TEXT,mainKeyboard()));

bot.hears(RX_TYPES, async ctx=>{
  const types=await getTypes();
  await ctx.reply('–¢–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–∞:\n‚Ä¢ '+types.join('\n‚Ä¢ '), mainKeyboard());
});
bot.hears(RX_CURR, async ctx=>{
  try{ const curr=await getCurrencies(); await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n‚Ä¢ '+curr.join('\n‚Ä¢ '), mainKeyboard()); }
  catch(e){ await ctx.reply('‚ùå '+e.message, mainKeyboard()); }
});
bot.hears(RX_STATS, async ctx=>{
  await ctx.reply('–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?', Markup.inlineKeyboard([
    [Markup.button.callback('üìÖ –°–µ–≥–æ–¥–Ω—è','stats:day')],
    [Markup.button.callback('üóì 7 –¥–Ω–µ–π','stats:week')],
    [Markup.button.callback('üìÜ –ú–µ—Å—è—Ü','stats:month')],
  ]));
});
bot.action('stats:day',  async ctx=>{ await ctx.answerCbQuery(); const s=startOfToday(); const e=addDays(s,1); const x=await sumUSD(s,e); await ctx.editMessageText(`–°—É–º–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${x.toFixed(2)} USD`); });
bot.action('stats:week', async ctx=>{ await ctx.answerCbQuery(); const e=addDays(startOfToday(),1); const s=addDays(e,-7); const x=await sumUSD(s,e); await ctx.editMessageText(`–°—É–º–º–∞ –∑–∞ 7 –¥–Ω–µ–π: ${x.toFixed(2)} USD`); });
bot.action('stats:month',async ctx=>{ await ctx.answerCbQuery(); const s=startOfMonth(); const e=addDays(startOfToday(),1); const x=await sumUSD(s,e); await ctx.editMessageText(`–°—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü: ${x.toFixed(2)} USD`); });

bot.hears(RX_UNDO, async ctx=>{
  try{ const r=await undoLastForUser(ctx.from.id); if(r.ok) await ctx.reply(`–£–¥–∞–ª–∏–ª —Å—Ç—Ä–æ–∫—É ‚Ññ${r.row}`,mainKeyboard()); else await ctx.reply('‚ùå '+r.reason,mainKeyboard()); }
  catch(e){ await ctx.reply('‚ùå '+(e.message||e), mainKeyboard()); }
});
bot.hears(RX_HELP,  ctx=>ctx.reply(HELP_TEXT, mainKeyboard()));

/* ===== –ú–∞—Å—Ç–µ—Ä ¬´–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥¬ª ===== */
bot.hears(RX_ADD, async ctx=>{
  ctx.session.wiz = { step:'date', data:{} };
  await ctx.reply('–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç–æ ‚Äî –≤–æ–∑—å–º—É —Å–µ–≥–æ–¥–Ω—è', cancelKeyboard());
});
bot.hears(RX_CANCEL, async ctx=>{
  ctx.session.wiz = null;
  await showMenu(ctx,'–û–∫, –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥.');
});

bot.on('text', async (ctx,next)=>{
  if(!ctx.session?.wiz) return next();
  const st=ctx.session.wiz; const txt=(ctx.message.text||'').trim();
  try{
    if(st.step==='date'){ st.data.date=normalizeDate(txt); st.step='pay'; return ctx.reply('–ü–ª–∞—Ç—ë–∂–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AdvCash, Capitalist, Card)', cancelKeyboard()); }
    if(st.step==='pay'){ if(!txt) return ctx.reply('–ü–ª–∞—Ç—ë–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', cancelKeyboard()); st.data.pay=txt; st.step='type';
      const types=await getTypes(); const kb=Markup.keyboard([...types.map(t=>[t]),['‚ùå –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞']]).resize().oneTime(); return ctx.reply('–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ):', kb); }
    if(st.step==='type'){ st.data.type=await normalizeType(txt); st.step='geo'; return ctx.reply('GEO (–¥–≤–µ –±—É–∫–≤—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä UA, KZ, PL)', cancelKeyboard()); }
    if(st.step==='geo'){ if(!txt) return ctx.reply('GEO –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', cancelKeyboard()); st.data.geo=txt.toUpperCase(); st.step='amt'; return ctx.reply('–°—É–º–º–∞ (—á–∏—Å–ª–æ, —Ç–æ—á–∫–∞/–∑–∞–ø—è—Ç–∞—è –¥–æ–ø—É—Å—Ç–∏–º—ã)', cancelKeyboard()); }
    if(st.step==='amt'){ const n=Number(txt.replace(',','.')); if(!(n>0)) return ctx.reply('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', cancelKeyboard()); st.data.amt=n; st.step='curr';
      const curr=await getCurrencies(); const kb=Markup.keyboard([...curr.map(c=>[c]),['‚ùå –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞']]).resize().oneTime(); return ctx.reply('–í–∞–ª—é—Ç–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ):', kb); }
    if(st.step==='curr'){ st.data.curr=normalizeCurr(txt); st.step='comm'; return ctx.reply('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ):', cancelKeyboard()); }
    if(st.step==='comm'){
      st.data.comm=txt; const row=[st.data.date,st.data.pay,st.data.type,st.data.geo,st.data.amt,st.data.curr,st.data.comm];
      await validateRow(row); const rowNum=await appendExpenseRow(ctx.from.id,row); ctx.session.wiz=null;
      const dd=ddmmyyyy(st.data.date);
      return ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:
–î–∞—Ç–∞: ${dd}
–ü–ª–∞—Ç—ë–∂–∫–∞: ${st.data.pay}
–¢–∏–ø: ${st.data.type}
GEO: ${st.data.geo}
–°—É–º–º–∞: ${st.data.amt}
–í–∞–ª—é—Ç–∞: ${st.data.curr}` + (st.data.comm?`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${st.data.comm}`:'') + `

–°—Ç—Ä–æ–∫–∞ ‚Ññ${rowNum}. –ö–æ–ª–æ–Ω–∫–∞ G (USD) –ø–æ—Å—á–∏—Ç–∞–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–æ–π.`, mainKeyboard());
    }
  }catch(e){ ctx.session.wiz=null; return ctx.reply('‚ùå '+(e.message||e), mainKeyboard()); }
});

/* –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: /exp –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π */
bot.hears(/^\/exp(?:@[\w_]+)?\s*(.*)$/i, async ctx=>{
  try{
    const p=(ctx.match?.[1]||'').split(';').map(s=>s.trim()); while(p.length<7)p.push('');
    const [dateStr,pay,typeRaw,geoRaw,amtStr,currRaw,comm]=p;
    const row=[ normalizeDate(dateStr), pay||'N/A', await normalizeType(typeRaw), String(geoRaw||'').toUpperCase(),
                Number(String(amtStr||'').replace(',','.')), normalizeCurr(currRaw), comm ];
    await validateRow(row); await appendExpenseRow(ctx.from.id,row);
    await ctx.reply('‚úÖ –ì–æ—Ç–æ–≤–æ. –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.', mainKeyboard());
  }catch(e){ await ctx.reply('‚ùå '+e.message+'\n–§–æ—Ä–º–∞—Ç: /exp –î–∞—Ç–∞; –ü–ª–∞—Ç—ë–∂–∫–∞; –¢–∏–ø; GEO; –°—É–º–º–∞; –í–∞–ª—é—Ç–∞; –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', mainKeyboard()); }
});

/* Fallback: –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é */
bot.on('text', ctx=>showMenu(ctx));

/** ====== SERVER START ====== **/
const app = express();
app.get('/health', (_,res)=>res.send('ok'));
const PORT = process.env.PORT || 3000;

(async ()=>{
  try{
    await bot.telegram.setMyCommands([
      { command:'help', description:'–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è' },
      { command:'types', description:'–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤' },
      { command:'currencies', description:'–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç' },
      { command:'whoami', description:'–ü–æ–∫–∞–∑–∞—Ç—å user_id' }
    ]);
  }catch{}

  if (WEBHOOK_BASE_URL){
    const path='/tg-webhook';
    app.post(path, express.json(), (req,res)=>bot.webhookCallback(path)(req,res));
    await bot.telegram.setWebhook(`${WEBHOOK_BASE_URL}${path}`);
    app.listen(PORT, ()=>console.log('Bot via webhook on', PORT, 'url:', `${WEBHOOK_BASE_URL}${path}`));
  } else {
    await bot.launch();
    app.listen(PORT, ()=>console.log('Bot via long polling on', PORT));
  }
  process.once('SIGINT', ()=>bot.stop('SIGINT'));
  process.once('SIGTERM', ()=>bot.stop('SIGTERM'));
})();
